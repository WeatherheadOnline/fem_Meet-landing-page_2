~ 29/05/25 ~
I will attempt to use React together with SASS, for the first time, in this project. 

Components I can make once and then re-use (+/- variables):
- buttons (cyan and purple variants)
- page numbers
- combination of p.h2-like and p.description

Sketched out the structure I think I'll need: see below.

In react: added header, main and footer component files, and hooked them up so they're rendering to the screen now.

~ 30/25/25 ~
Working on making the button its own component.
- Got a basic button imported from Button.js into Header.js. 
- Got a button being added to a button-wrapper, and imported the wrapper into Header.js.
- Able to pass props from ButtonWrapper into Button
- Able to pass props from header, across to ButtonWrapper, into Button
- Able to pass an array of values from header, across to ButtonWrapper -> button
- Expanded the array to contain an array for each button, representing text, span text, and class name. Able to get this to render.
- Added SASS to ensure I can style the button classes and the span text
- Initialized more SASS files for each component
- Moved button styling into buttons.sass
- Added enough SASS to get the background images added and to get things in the right position relative to each other, including crude media queries for mobile vs desktop. Come back to add correct spacing later after I decide how I want to approach that.
- Added a number component that can have a number passed in as prop
- Adding an image-container component for Main. Got an array of images passed from Main to Gallery -> render
- Added SASS to get the images into a grid
** Git commit **
- Added text in the Main section. Made a WrapperH2P component that I can re-use in the footer. Passed in the h2 and p text contents -> rendered.
** Git commit **
- Added a footer section, re-using the WrapperH2P and the ButtonWrapper elements.
- Added grey outline and vertical line on number components.
** Git commit **
- Turned the button input from an array of arrays to an array of objects. This is a more appropriate data structure because now each piece of info has a label to make it clear that it's the id, or the class, or etc. Updated header and footer sections -> rendering just like before.


In header:
<ButtonWrapper buttonContents={[
    ["button-cyan", "Download", "v1.3"], 
    ["button-purple", "What is it?", ""]
]}/>



In footer:
<ButtonWrapper 
    buttonContents={[
        ["button-purple", "Download", "v1.3"]
    ]}
/>



In button.js:

function Button(props) {
    return(
        <button className={props.buttonInput[0]}>{props.buttonInput[1]} <span>{props.buttonInput[2]}</span></button>
    ) 
};

class ButtonWrapper extends React.Component {
    render() {
        const buttons = this.props.buttonContents.map((input) => {
            return(
                <Button buttonInput={input} />
            )
        });

        return(
            <div className="button-wrapper">
                {buttons}
            </div>
        )
    }
};

export default ButtonWrapper;




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
29/05/25
Sketching out the structure I think I'll need:
*** = reusable component

<root>
<App>

<header>
  <div.logo-container></div>

  <div.header-contents>
    <div.header-image-touchscreen></div>
    <div.header-desktop-left></div>
    <div.header-central>                   
      <h1></h1>
      <p.description></p>
      <div.button-wrapper>***
        <button.cyan></button>***
        <button.purple></button>***
      </div.button-wrapper>
    </div.header-central>
    <div.header-desktop-right></div>
  </div.header-main-contents>
</header>

<main>
  <div.page-number>***
    <div.number>
      <p></p>
    </div.number>
  </div.page-number>

  <div.image-container>
        <img src="..." alt="Woman in videocall">
        <img src="..." alt="Women videochatting">
        <img src="... alt="Men in meeting">
        <img src="..." alt="Man texting">
  </div>

  <div.text-contents>
    <div.tagline></div>
    <div.h2-p-wrapper>***
      <p.h2-like></p>***
      <p.description></p>***
    </div.h2-p-wrapper>
  </div.text-contents>
</main>

<footer>
  <div.number-component>***
    <div.number>
      <p></p>
    </div.number>
  </div.number-component>

  <div.h2-p-wrapper>***
    <p.h2-like></p>***
    <p.description></p>***
  </div.h2-p-wrapper>

  <div.button-wrapper>***
    <button.purple></button>***
  </div.button-wrapper>
  <div.attribution></div>
</footer>
</App>
</root>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





